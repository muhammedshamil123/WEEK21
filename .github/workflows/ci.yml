name: Go CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      
      # Step 4: Run unit tests
      - name: Run unit tests
        run: |
          go test ./... -v -coverprofile=coverage.out

      # Step 5: Upload code coverage report
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage.out

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest
          sudo mv ./bin/golangci-lint /usr/local/bin/golangci-lint

      - name: Run golangci-lint
        run: golangci-lint run ./...

  deploy:
    needs: [build-and-test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Replace with your AWS region

      # Step 3: Build the project binary
      - name: Build Go binary
        run: |
          mkdir -p build
          go build -o build/main .

      # Step 4: Deploy to AWS EC2
      - name: Deploy to EC2
        run: |
          # Replace with your EC2 instance details
          scp -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY_PATH }} build/main ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/app/main
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY_PATH }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} "sudo systemctl restart my-go-app"
